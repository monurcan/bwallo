var qs=require("querystring"),parse=require("url").parse,readFileSync=require("fs").readFileSync,crypto=require("crypto"),base64id=require("base64id"),transports=require("./transports"),EventEmitter=require("events").EventEmitter,Socket=require("./socket"),WebSocketServer=require("ws").Server,debug=require("debug")("engine");module.exports=Server;function Server(a){this.clients={};this.clientsCount=0;a=a||{};this.pingTimeout=a.pingTimeout||60000;this.pingInterval=a.pingInterval||25000;this.upgradeTimeout=a.upgradeTimeout||10000;this.maxHttpBufferSize=a.maxHttpBufferSize||100000000;this.transports=a.transports||Object.keys(transports);this.allowUpgrades=false!==a.allowUpgrades;this.allowRequest=a.allowRequest;this.cookie=false!==a.cookie?(a.cookie||"io"):false;if(~this.transports.indexOf("websocket")){this.ws=new WebSocketServer({noServer:true,clientTracking:false})}}Server.errors={UNKNOWN_TRANSPORT:0,UNKNOWN_SID:1,BAD_HANDSHAKE_METHOD:2,BAD_REQUEST:3};Server.errorMessages={0:"Transport unknown",1:"Session ID unknown",2:"Bad handshake method",3:"Bad request"};Server.prototype.__proto__=EventEmitter.prototype;Server.prototype.clients;Server.prototype.upgrades=function(a){if(!this.allowUpgrades){return[]}return transports[a].upgradesTo||[]};Server.prototype.verify=function(c,d,b){var e=c._query.transport;if(!~this.transports.indexOf(e)){debug('unknown transport "%s"',e);return b(Server.errors.UNKNOWN_TRANSPORT,false)}var a=c._query.sid;if(a){if(!this.clients.hasOwnProperty(a)){return b(Server.errors.UNKNOWN_SID,false)}if(!d&&this.clients[a].transport.name!==e){debug("bad request: unexpected transport without upgrade");return b(Server.errors.BAD_REQUEST,false)}}else{if("GET"!=c.method){return b(Server.errors.BAD_HANDSHAKE_METHOD,false)}if(!this.allowRequest){return b(null,true)}return this.allowRequest(c,b)}b(null,true)};Server.prototype.prepare=function(a){if(!a._query){a._query=~a.url.indexOf("?")?qs.parse(parse(a.url).query):{}}};Server.prototype.close=function(){debug("closing all open clients");for(var a in this.clients){this.clients[a].close()}return this};Server.prototype.handleRequest=function(c,b){debug('handling "%s" http request "%s"',c.method,c.url);this.prepare(c);c.res=b;var a=this;this.verify(c,false,function(d,e){if(!e){sendErrorMessage(b,d);return}if(c._query.sid){debug("setting new request for existing client");a.clients[c._query.sid].transport.onRequest(c)}else{a.handshake(c._query.transport,c)}})};function sendErrorMessage(a,b){a.writeHead(400,{"Content-Type":"application/json"});a.end(JSON.stringify({code:b,message:Server.errorMessages[b]}))}Server.prototype.handshake=function(h,c){var g=base64id.generateId();debug('handshaking client "%s"',g);var f=h;try{var h=new transports[h](c);if("polling"==f){h.maxHttpBufferSize=this.maxHttpBufferSize}if(c._query&&c._query.b64){h.supportsBinary=false}else{h.supportsBinary=true}}catch(d){sendErrorMessage(c.res,Server.errors.BAD_REQUEST);return}var a=new Socket(g,this,h,c);var b=this;if(false!==this.cookie){h.on("headers",function(e){e["Set-Cookie"]=b.cookie+"="+g})}h.onRequest(c);this.clients[g]=a;this.clientsCount++;a.once("close",function(){delete b.clients[g];b.clientsCount--});this.emit("connection",a)};Server.prototype.handleUpgrade=function(d,a,c){this.prepare(d);var b=this;this.verify(d,true,function(e,f){if(!f){a.end();return}b.ws.handleUpgrade(d,a,c,function(g){b.onWebSocket(d,g)})})};Server.prototype.onWebSocket=function(b,a){if(!transports[b._query.transport].prototype.handlesUpgrades){debug("transport doesnt handle upgraded requests");a.close();return}var d=b._query.sid;b.websocket=a;if(d){if(!this.clients[d]){debug("upgrade attempt for closed client");a.close()}else{if(this.clients[d].upgraded){debug("transport had already been upgraded");a.close()}else{debug("upgrading existing transport");var c=new transports[b._query.transport](b);if(b._query&&b._query.b64){c.supportsBinary=false}else{c.supportsBinary=true}this.clients[d].maybeUpgrade(c)}}}else{this.handshake(b._query.transport,b)}};