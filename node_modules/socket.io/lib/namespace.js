var Socket=require("./socket");var Emitter=require("events").EventEmitter;var parser=require("socket.io-parser");var debug=require("debug")("socket.io:namespace");var hasBin=require("has-binary-data");module.exports=exports=Namespace;exports.events=["connect","connection","newListener"];exports.flags=["json"];var emit=Emitter.prototype.emit;function Namespace(b,a){this.name=a;this.server=b;this.sockets=[];this.connected={};this.fns=[];this.ids=0;this.acks={};this.initAdapter()}Namespace.prototype.__proto__=Emitter.prototype;exports.flags.forEach(function(a){Namespace.prototype.__defineGetter__(a,function(){this.flags=this.flags||{};this.flags[a]=true;return this})});Namespace.prototype.initAdapter=function(){this.adapter=new (this.server.adapter())(this)};Namespace.prototype.use=function(a){this.fns.push(a);return this};Namespace.prototype.run=function(a,c){var b=this.fns.slice(0);if(!b.length){return c(null)}function d(e){b[e](a,function(f){if(f){return c(f)}if(!b[e+1]){return c(null)}d(e+1)})}d(0)};Namespace.prototype.to=Namespace.prototype["in"]=function(a){this.rooms=this.rooms||[];if(!~this.rooms.indexOf(a)){this.rooms.push(a)}return this};Namespace.prototype.add=function(b,d){debug("adding socket to nsp %s",this.name);var a=new Socket(this,b);var c=this;this.run(a,function(e){process.nextTick(function(){if("open"==b.conn.readyState){if(e){return a.error(e.data||e.message)}c.sockets.push(a);a.onconnect();if(d){d()}c.emit("connect",a);c.emit("connection",a)}else{debug("next called after client was closed - ignoring socket")}})});return a};Namespace.prototype.remove=function(a){var b=this.sockets.indexOf(a);if(~b){this.sockets.splice(b,1)}else{debug("ignoring remove for %s",a.id)}};Namespace.prototype.emit=function(c){if(~exports.events.indexOf(c)){emit.apply(this,arguments)}else{var b=Array.prototype.slice.call(arguments);var a=parser.EVENT;if(hasBin(b)){a=parser.BINARY_EVENT}var d={type:a,data:b};if("function"==typeof b[b.length-1]){throw new Error("Callbacks are not supported when broadcasting")}this.adapter.broadcast(d,{rooms:this.rooms,flags:this.flags});delete this.rooms;delete this.flags}return this};Namespace.prototype.send=Namespace.prototype.write=function(){var a=Array.prototype.slice.call(arguments);a.unshift("message");this.emit.apply(this,a);return this};