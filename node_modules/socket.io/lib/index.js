var http=require("http");var read=require("fs").readFileSync;var parse=require("url").parse;var engine=require("engine.io");var client=require("socket.io-client");var clientVersion=require("socket.io-client/package").version;var Client=require("./client");var Namespace=require("./namespace");var Adapter=require("socket.io-adapter");var debug=require("debug")("socket.io:server");var url=require("url");module.exports=Server;var clientSource=read(require.resolve("socket.io-client/socket.io.js"),"utf-8");function Server(a,b){if(!(this instanceof Server)){return new Server(a,b)}if("object"==typeof a&&!a.listen){b=a;a=null}b=b||{};this.nsps={};this.path(b.path||"/socket.io");this.serveClient(false!==b.serveClient);this.adapter(b.adapter||Adapter);this.origins(b.origins||"*:*");this.sockets=this.of("/");if(a){this.attach(a,b)}}Server.prototype.checkRequest=function(e,d){var a=e.headers.origin||e.headers.referer;if("null"==a){a="*"}if(this._origins.indexOf("*:*")!==-1){return d(null,true)}if(a){try{var f=url.parse(a);f.port=f.port||80;var c=~this._origins.indexOf(f.hostname+":"+f.port)||~this._origins.indexOf(f.hostname+":*")||~this._origins.indexOf("*:"+f.port);return d(null,!!c)}catch(b){}}d(null,false)};Server.prototype.serveClient=function(a){if(!arguments.length){return this._serveClient}this._serveClient=a;return this};var oldSettings={transports:"transports","heartbeat timeout":"pingTimeout","heartbeat interval":"pingInterval","destroy buffer size":"maxHttpBufferSize"};Server.prototype.set=function(a,b){if("authorization"==a&&b){this.use(function(c,d){b(c.request,function(f,e){if(f){return d(new Error(f))}if(!e){return d(new Error("Not authorized"))}d()})})}else{if("origins"==a&&b){this.origins(b)}else{if("resource"==a){this.path(b)}else{if(oldSettings[a]&&this.eio[oldSettings[a]]){this.eio[oldSettings[a]]=b}else{console.error("Option %s is not valid. Please refer to the README.",a)}}}}return this};Server.prototype.path=function(a){if(!arguments.length){return this._path}this._path=a.replace(/\/$/,"");return this};Server.prototype.adapter=function(a){if(!arguments.length){return this._adapter}this._adapter=a;for(var b in this.nsps){this.nsps[b].initAdapter()}return this};Server.prototype.origins=function(a){if(!arguments.length){return this._origins}this._origins=a;return this};Server.prototype.listen=Server.prototype.attach=function(a,c){if("function"==typeof a){var d="You are trying to attach socket.io to an expressrequest handler function. Please pass a http.Server instance.";throw new Error(d)}if(Number(a)==a){a=Number(a)}if("number"==typeof a){debug("creating http server and binding to %d",a);var b=a;a=http.Server(function(f,e){e.writeHead(404);e.end()});a.listen(b)}c=c||{};c.path=c.path||"/socket.io";c.allowRequest=this.checkRequest.bind(this);debug("creating engine.io instance with opts %j",c);this.eio=engine.attach(a,c);if(this._serveClient){this.attachServe(a)}this.bind(this.eio);return this};Server.prototype.attachServe=function(a){debug("attaching client serving req handler");var d=this._path+"/socket.io.js";var c=a.listeners("request").slice(0);var b=this;a.removeAllListeners("request");a.on("request",function(g,f){if(0==g.url.indexOf(d)){b.serve(g,f)}else{for(var e=0;e<c.length;e++){c[e].call(a,g,f)}}})};Server.prototype.serve=function(b,a){if(b.headers.etag){if(clientVersion==b.headers.etag){debug("serve client 304");a.writeHead(304);a.end();return}}debug("serve client source");a.setHeader("Content-Type","application/javascript");a.setHeader("ETag",clientVersion);a.writeHead(200);a.end(clientSource)};Server.prototype.bind=function(a){this.engine=a;this.engine.on("connection",this.onconnection.bind(this));return this};Server.prototype.onconnection=function(b){debug("incoming connection with id %s",b.id);var a=new Client(this,b);a.connect("/");return this};Server.prototype.of=function(a,b){if(!this.nsps[a]){debug("initializing namespace %s",a);var c=new Namespace(this,a);this.nsps[a]=c}if(b){this.nsps[a].on("connect",b)}return this.nsps[a]};["on","to","in","use","emit","send","write"].forEach(function(a){Server.prototype[a]=function(){var b=this.sockets[a];return b.apply(this.sockets,arguments)}});Namespace.flags.forEach(function(a){Server.prototype.__defineGetter__(a,function(b){this.flags.push(b);return this})});Server.listen=Server;